This Repo is Cloned From Exposed and Upgraded to support Android 9 by Mobin Jafari


dyncall - A Generic Dynamic FFI package
=======================================

dyncall is a low-level toolkit providing a portable abstraction for 
handling native code dynamically at run time.
It comprises three independent components, available as C libraries, namely:

 - 'dyncall' for making function calls,
 - 'dyncallback' or writing generic callback handlers, and
 - 'dynload' for loading code.

The package provides abstractions to the Application Binary Interface 
of various hardware platforms such as IA32, AMD64, ARM, PowerPC, MIPS 
and SPARC.

Our releases are deeply tested using a flexible test suite.

A typical application for the use of dyncall is the back-end of a FFI 
(foreign function interface) for scripting languages to connect with 
the C/C++ world.

The binary footprint of the package is approx. 20 kb.
A test suite and comprehensive documentation is available.


Building the libraries
----------------------

Prequisites: 
 - C compiler such as gcc, clang, sunpro or msvc.
 - Assembler such as gas (gnu/apple), fbe or masm.
 - Build system such as 'shell/make', cmake, nmake (windows) or mk (plan9).


Supported Architectures and ABIs:
---------------------------------

 - x86     32/64-bit (cdecl, fastcall, stdcall, C++ this calls, Syscalls)
 - ARM     AArch32   (ARM/Thumb mode, v4t-v7, oabi/eabi, soft/hardfloat ABIs)
 - MIPS    32/64-bit (o32, n64, eabi)
 - PowerPC 32-bit    (Mac OS X, System V)
 - Sparc   32/64-bit (v7/8 and v9)

NOTE: Callback support is currently available on 
      x86-32/64, arm32 softfloat ABIs and ppc32 OS X ABI.

Supported Operating Systems:
----------------------------

 - Android
 - *BSD
 - Haiku
 - iOS
 - Linux
 - Mac OS X
 - Microsoft Windows
 - Minix
 - Nintendo DS Homebrew
 - Plan9 / 9front
 - Playstation Portable Homebrew
 - ReactOS
 - Solaris


Building the libraries
----------------------

Using configure shell script and GNU/BSD/Sun make system.

$ ./configure
$ make
$ make install

Testing:

$ make tests
$ make run-tests


Build 'out-of-source'
---------------------

$ cd <build_dir>
$ <src_dir>/configure --prefix=<install_dir>
$ make
$ sudo make install


Building using CMake
--------------------

$ cmake 
$ make
$ sudo make install


Building on Windows
-------------------

See doc/README.Windows


Building the manual
-------------------

Make sure pdflatex is installed and run

$ make docs


platform-specific READMEs under doc/ for more information.

